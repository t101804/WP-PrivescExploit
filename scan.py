import argparse,os , requests, json, re
from threading import *
from threading import Thread
from queue import Queue
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def print_warning(msg):
    print(f"\033[93m[!] {msg} \033[0m\U000026A0")

def print_success(msg):
    print(f"\033[92m[+] {msg} \033[0m\U00002705")

def print_failure(msg):
    print(f"\033[91m[-] {msg} \033[0m\U0000274C")
    open(f"failure_log.txt", "a" ).write( msg + "\n" )

# Always Put Credits to @CallMeRep :) i happy if i inspired you or if you want copy paste my system 
# always dont forget to put credits

class Worker(Thread):
  def __init__(self, tasks):
      Thread.__init__(self)
      self.tasks = tasks
      self.daemon = True
      self.start()

  def run(self):
      while True:
          func, args, kargs = self.tasks.get()
          try: func(*args, **kargs)
          except Exception as e: print(e)
          self.tasks.task_done()

class ThreadPool:
  def __init__(self, num_threads):
      self.tasks = Queue(num_threads)
      for _ in range(num_threads): Worker(self.tasks)

  def add_task(self, func, *args, **kargs):
      self.tasks.put((func, args, kargs))

  def wait_completion(self):
      self.tasks.join()

class Main():
    def __init__(self):
        self.args = True

    @classmethod
    def Args(cls):
        Banner = r"""
Just checker vuln 
@CallMeRep
"""
        cls.Runner(Banner)
        parser = argparse.ArgumentParser()
        parser.add_argument('--lists', type=str, help='input file')
        args = parser.parse_args()
        if args.lists:
            Scrapper(None, args.lists, args.thread, args.techsave).executor()
        else:

            lists = input("Enter a list filename (e.g : weblists.txt): ")
            threading = input("Enter a thread (default : 10): ")
            Scrapper(None, lists, threading).executor()
          
    @classmethod
    def Runner(cls, text):
        colors = ['\033[1;31m', '\033[1;37m', '\033[1;30m']
        lines = text.splitlines()
        for line in lines:
            color = colors[lines.index(line) % len(colors)]
            print(color + line.rstrip() + '\033[0m')



class Scrapper():
    def __init__(self , site ,lists , thread, ):
        self.multiScan = False
        self.site = site
        self.lists = lists
        self.thread = thread

    def ReadLists(self):
        Pool = ThreadPool(int(self.thread))
        sites = open(self.lists, encoding="utf8" ).read().splitlines()
        for site in sites:
            Pool.add_task(self.Scrapper, site)
        Pool.wait_completion()

    def Scrapper(self, wordpress_url):
        if not wordpress_url.startswith('http'): wordpress_url = "http://" + wordpress_url
        # response = requests.get(site+"/wp-content/plugins/essential-addons-for-elementor-lite/readme.txt", verify=False)
        # if "Essential Addons for Elementor" in response.text: open(f"vuln.txt", "a").write(site + "\n")
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
        response = requests.get(wordpress_url, headers=headers, verify=False)
        if "/front-end/css/view/general.min.css" in response.text:
            try:
                version_match = re.search(r"front-end/css/view/general\.min\.css\?ver=(\d+\.\d+\.\d+)", response.text)
                if version_match:
                    version = version_match.group(1)
                    if "5.4.0" <= version <= "5.7.1":
                        print_success(f"{wordpress_url} Found Vulnerable Version: {version}")
                        open(f"results/elemVuln.txt", "a").write(wordpress_url + "\n")
                        return
                    else:
                        print_warning("Found version: "+version+" sadly not vulnerable.")
                        return 
                    
            except Exception as e:
                print_warning("Error occurred while extracting version:", str(e))
                return
        else:
            url = f"{wordpress_url}/wp-content/plugins/essential-addons-for-elementor-lite/readme.txt"
            response = requests.get(url, headers=headers, verify=False)
            if "Essential Addons for Elementor" not in response.text:
                print_warning(f"{wordpress_url} Unable to find essential-addons-for-elementor-lite plugin readme.txt.")
                return
            for line in response.text:
                if line.startswith("Stable tag:"):
                    stable_tag = line.split(":")[1].strip()  # Extract the value of the stable tag
                    print_warning(wordpress_url + " tag > " + stable_tag)
                    if "5.4.0" <= stable_tag <= "5.7.1":
                            print_success(f"{wordpress_url} Found Vulnerable Version: {stable_tag}" )
                            open(f"results/elemVuln.txt", "a").write(wordpress_url + "\n")
                            return
                    else:
                            print_warning(f"{wordpress_url} Found version: {stable_tag} sadly not vulnerable.")
                            return

    def executor(self):
        if self.lists is None:
            self.Scrapper(self.site)
        else:
            self.ReadLists()

if __name__ == '__main__':
    os.system('cls' if os.name == 'nt' else 'clear')
    if not os.path.exists('results'): os.mkdir('results')
    Main.Args()
